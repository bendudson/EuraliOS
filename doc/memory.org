* Memory

Some useful python functions to map between table indices and
addresses are:
#+begin_src python
def page_table_indices(vaddr):
    return ((vaddr >> 39) & 511, (vaddr >> 30) & 511, (vaddr >> 21) & 511, (vaddr >> 12) & 511, vaddr & 4095)

def page_table_address(indices):
    return (indices[0] << 39) + (indices[1] << 30) + (indices[2] << 21) + (indices[3] << 12) + indices[4]
#+end_src

** Kernel memory layout

- Code below (0, 0, 40, 0, 0),  0x5000000 i.e 50Mb maximum
- Kernel heap (136, 273, 34, 64, 0), 0x_4444_4444_0000.  Set by
  =HEAP_START= and =HEAP_SIZE= constants in =memory/allocator.rs=.
- Physical memory map

** User program memory layout

- Kernel info page, (0, 0, 39, 511, 0) to (0, 0, 40, 0, 0), 0x4fff000 to 0x5000000.
  Read-only, contains information for fast timing functions.

- Code (0, 0, 40, 0, 0) to (0, 2, 0, 0, 0), 0x5000000 to 0x80000000. Set by =USER_CODE_START= and
  =USER_CODE_END= constants in =process.rs=.

- Stack (5,0,0,0,0) to (5,0,1,0,0), 0x28000000000 to
  0x28000200000. 2Mb for all threads. Set by the
  =THREAD_STACK_PAGE_INDEX= constant in =memory.rs=.

- Heap is (5,0,3,0,0) to (5,0,23,0,0), 0x28000600000 to 0x28002e00000,
  a total of 0x2800000 bytes or 40Mb.  Set by =USER_HEAP_START= and
  =USER_HEAP_SIZE= constants in =process.rs=.

- Memory chunks (5,1,0,0,0) to (6,0,0,0,0). 511 chunks, up to 1Gb
  each.  Set by =MEMORY_CHUNK_L4_ENTRY=, =MEMORY_CHUNK_L3_FIRST= and
  =MEMORY_CHUNK_L3_LAST= constants in =memory.rs=.

