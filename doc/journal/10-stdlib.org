* Standard library

The user code is now getting large enough that it would be useful
to split it into a library. That will also make creating new
user programs easier.

This is not going to be the full Rust standard library (far from it!)
but we'll try to have the same API as =std= where possible.

** Adding a library

In the workspace root directory edit the =Cargo.toml= file:
#+begin_src toml
  [workspace]
members = [
    "kernel",
    "hello",
    "euralios_std"  # New
]
#+end_src
then run =cargo= to create the =euralios_std= crate:
#+begin_src sh
  cargo add euralios_std --lib
#+end_src

Our user program =hello= is going to depend on this library,
so in =hello/Cargo.toml=:
#+begin_src toml
[dependencies]
linked_list_allocator = "0.9.0"
euralios_std = { path = "../euralios_std" }  # New
#+end_src

** Moving syscalls into library

In the library we can now start adding some functions.
In =euralios_std/src/lib.rs=:
#+begin_src rust
#![no_std]
#![no_main]

pub mod syscalls;
#+end_src

and in a new file =syscalls.rs= we can start with:
#+begin_src rust
  use core::arch::asm;

  pub fn thread_exit() -> ! {
      unsafe {
          asm!("mov rax, 1", // exit_current_thread
               "syscall");
      }
      loop{}
  }

  pub fn receive(handle: u64) -> Result<u64, u64> {
      let mut err: u64;
      let value: u64;
      unsafe {
          asm!("mov rax, 3", // sys_receive
               "syscall",
               in(rdi) handle,
               lateout("rax") err,
               lateout("rdi") value);
      }
      if err == 0 {
          return Ok(value);
      }
      Err(err)
  }

  pub fn send(handle: u64, value: u64) -> Result<(), u64> {
      let err: u64;
      unsafe {
          asm!("mov rax, 4", // sys_send
               "syscall",
               in("rdi") handle,
               in("rsi") value,
               lateout("rax") err);
      }
      if err == 0 {
          return Ok(());
      }
      Err(err)
  }
#+end_src

so the =hello= program =_start()= function can become:


#+begin_src rust
  use euralios_std::syscalls; // New

  #[no_mangle]
pub unsafe extern "sysv64" fn _start() -> ! {
    // Information passed from the operating system
    let heap_start: usize;
    let heap_size: usize;
    asm!("",
         lateout("rax") heap_start,
         lateout("rcx") heap_size,
         options(pure, nomem, nostack)
    );
    println!("Heap start {:#016X}, size: {} bytes ({} Mb)", heap_start, heap_size, heap_size / (1024 * 1024));

    ALLOCATOR.lock().init(heap_start, heap_size);

    loop{
        let value = syscalls::receive(0).unwrap();
        let ch = char::from_u32(value as u32).unwrap();
        println!("Received: {} => {}", value, ch);
        if ch == 'x' {
            println!("Exiting");
            break;
        }
        syscalls::send(1, value).unwrap();
    }

    syscalls::thread_exit();
}
#+end_src

** Debug output

#+begin_src rust
use core::arch::asm;
use core::format_args;
use core::fmt;

struct Writer {}

impl fmt::Write for Writer {
    fn write_str(&mut self, s: &str) -> fmt::Result {
        unsafe {
            asm!("mov rax, 2", // syscall function
                 "syscall",
                 in("rdi") s.as_ptr(), // First argument
                 in("rsi") s.len()); // Second argument
        }
        Ok(())
    }
}

pub fn _print(args: fmt::Arguments) {
    use core::fmt::Write;
    Writer{}.write_fmt(args).unwrap();
}

#[macro_export]
macro_rules! debug_print {
    ($($arg:tt)*) => ($crate::debug::_print(format_args!($($arg)*)));
}

#[macro_export]
macro_rules! debug_println {
    () => ($crate::debug_print!("\n"));
    ($($arg:tt)*) => ($crate::debug_print!("{}\n", format_args!($($arg)*)));
}
#+end_src

** Memory

Remove =linked_list_allocator= dependency from =hello/Cargo.toml=,
and add to =euralios_std/Cargo.toml=

In =memory.rs=
#+begin_src rust
extern crate alloc;
use linked_list_allocator::LockedHeap;

use crate::debug_println;

#[global_allocator]
static ALLOCATOR: LockedHeap = LockedHeap::empty();

pub fn init(heap_start: usize, heap_size: usize) {
    debug_println!("Heap start {:#016X}, size: {} bytes ({} Mb)", heap_start, heap_size, heap_size / (1024 * 1024));
    unsafe {ALLOCATOR.lock().init(heap_start, heap_size);}
}

// Allocator error handler
#[alloc_error_handler]
fn alloc_error_handler(layout: alloc::alloc::Layout) -> ! {
    panic!("allocation error: {:?}", layout)
}
#+end_src

** User entry point

In =lib.rs=:
#+begin_src rust
// User program entry point
extern {
    fn main() -> ();
}

#[no_mangle]
pub unsafe extern "sysv64" fn _start() -> ! {
    // Information passed from the operating system
    let heap_start: usize;
    let heap_size: usize;
    asm!("",
         lateout("rax") heap_start,
         lateout("rcx") heap_size,
         options(pure, nomem, nostack)
    );
    memory::init(heap_start, heap_size);

    main(); // New

    syscalls::thread_exit();
}
#+end_src

** Final user program

The =hello= program now consists of:
#+begin_src rust
#![no_std]
#![no_main]

use euralios_std::{debug_println, syscalls};

#[no_mangle]
fn main() {
    loop{
        let value = syscalls::receive(0).unwrap();
        let ch = char::from_u32(value as u32).unwrap();
        debug_println!("Received: {} => {}", value, ch);
        if ch == 'x' {
            debug_println!("Exiting");
            break;
        }
        syscalls::send(1, value).unwrap();
    }
}
#+end_src
