* Devices

The [[https://www.felixcloutier.com/x86/in][IN]] and [[https://www.felixcloutier.com/x86/out][OUT]] instructions are used to access ports. These ports
control many external devices, including those connected to the PCI
bus.

Add a new user program =pci= to the =members= list in the root =Cargo.toml= file, and create
the outline with:
#+begin_src shell
  cargo new pci
#+end_src

In =pci= edit the =Cargo.toml= file, and add
#+begin_src toml
  [dependencies]
  euralios_std = { path = "../euralios_std" }
#+end_src
and copy =build.rs= from =hello/= to =pci/=. The =pci/src/main.rs= file can contain a basic main function for now:
#+begin_src rust
  #![no_std]
  #![no_main]

  use euralios_std::debug_println;

  #[no_mangle]
  fn main() {
      debug_println!("Hello world!");
  }
#+end_src
To build the executable when we execute "make run", in the root
=makefile= we need to add the =pci= program:
#+begin_src makefile
  .PHONY: run
  run : user/hello user/pci
          cargo run --release --bin kernel
#+end_src

For now in =kernel/src/main.rs= in the =kernel_thread_main()= function
replace "../../user/hello" with "../../user/pci". Running
should now print "Hello world!".

** Accessing ports from user programs

This program first writes to the PCI address port =0xCF8=, and
then reads from the data port =0xCFC=.
#+begin_src rust
  #[no_mangle]
  fn main() {
      debug_println!("Hello world!");

      let device_info: u32;
      let device_addr: u32 = 0x8000_0000;
      const CONFIG_ADDRESS: u16 = 0x0CF8;
      const CONFIG_DATA: u16 = 0x0CFC;
      unsafe {
          asm!("out dx, eax",
               in("dx") CONFIG_ADDRESS,
               in("eax") device_addr);

          asm!("in eax, dx",
               in("dx") CONFIG_DATA,
               lateout("eax") device_info);
      }
      debug_println!("Device: {}", device_info);
  }
#+end_src

Note that the =in= and =out= instructions are unusual in only
using the =eax= register (or subsets of it) for the data,
and =dx= for the port number.

When this is run it produces a General Protection Fault (GPF):
The =in= and =out= instructions are privileged, with controls
on which processes can use them.

#+CAPTION: General Protection Fault due to user thread using I/O instructions without sufficient IO privileges.
#+NAME: fig-gpf
[[./img/12-01-gpf.png]]

To allow a user program to write to ports we need to change the I/O
Privilege Level (IOPL) to 3 (the ring our program is running in). This
is set in bits 12 and 13 of [[https://en.wikipedia.org/wiki/FLAGS_register][RFLAGS]], mask 0x3000.

In =process.rs=, =new_user_thread= modify the rflags:
#+begin_src rust
context.rflags = 0x0200 + 0x3000;
#+end_src
And now our program should run, printing a value for device_info!

It's probably not a good idea for every program to be able to read and
write to ports because a program could do anything to attached
devices. We need to be able to decide if a process should have IO
privileges by passing an argument to =new_user_thread=.  We could just
add a =bool= argument, but at the calling site a =true= or =false=
isn't very informative. Rust doesn't (yet?) have keyword arguments,
but the [[https://www.ameyalokare.com/rust/2017/11/02/rust-builder-pattern.html][builder pattern]] seems to be a common replacement. That seems
too much for just a couple of parameters, so for now we'll just do the
simple thing and define a struct:
#+begin_src rust
  pub struct Params {
      pub handles: Vec<Arc<RwLock<Rendezvous>>>,
      pub io_privileges: bool
  }

  pub fn new_user_thread(
      bin: &[u8],
      params: Params
  ) -> Result<u64, &'static str> {
      ...
  }
#+end_src
(somewhere before =drain='ing handles we need to define =let mut
handles = params.handles;=). The flags can now be set with
#+begin_src rust
  context.rflags = if params.io_privileges {
      0x200 + 0x3000 // Interrupt enable + IOPL 3
  } else {
      0x200 // Interrupt enable
  };
#+end_src

At the calling site =kernel_thread_main()= in =kernel/src/main.rs=:
#+begin_src rust
  process::new_user_thread(
          include_bytes!("../../user/pci"),
          process::Params{
              handles: Vec::from([
                  interrupts::keyboard_rendezvous(),
                  vga_rz
              ]),
              io_privileges: true
          });
#+end_src
The user program should now print a device number if =io_privileges=
is =true= and cause a General Protection Fault if it's =false=.


Device 8086:1237

According to the [[https://pci-ids.ucw.cz/read/PC/8086][PCI ID repository]] this is vendor
Intel Corporation, and 8086:1237 is [[https://pci-ids.ucw.cz/read/PC/8086/1237][440FX - 82441FX PMC]], the
[[https://en.wikipedia.org/wiki/Intel_440FX]["Natoma"]] chipset.

** Tidying up the code

There is a lot of information on the PCI bus on the [[https://wiki.osdev.org/PCI][OSDev wiki]] including
tables of the bit offsets, and device classes.

First we can wrap up the configuration code reader with a struct
representing a PCI bus location (bus, slot and function):
#+begin_src rust
#[derive(Clone, Copy)]
struct PciLocation {
    bus:  u16,
    slot: u16,
    function: u16
}
#+end_src
It's a simple type so it derives Clone and Copy traits so it can be
easily copied rather than moved.

We can then put the configuration reading code into a method:
#+begin_src rust
  const CONFIG_ADDRESS: u16 = 0xCF8;
  const CONFIG_DATA: u16 = 0xCFC;

  impl PciLocation {
      fn read_register(&self, register: u8) -> u32 {
          let addr = 0x8000_0000
              | ((self.bus  as u32) << 16)
              | ((self.slot as u32) << 11)
              | ((self.function as u32) <<  8)
              | ((register as u32) << 2);

          let value: u32;
          unsafe {
              asm!("out dx, eax",
                   in("dx") CONFIG_ADDRESS,
                   in("eax") addr,
                   options(nomem, nostack));

              asm!("in eax, dx",
                   in("dx") CONFIG_DATA,
                   lateout("eax") value,
                   options(nomem, nostack));
          }
          value
      }
  }
#+end_src

We then need a struct to represent a device which may be attached
to a PCI location:
#+begin_src rust
  struct Device {
      location: PciLocation,
      vendor_id: u16, // Identifies the manufacturer of the device
      device_id: u16, // Identifies the particular device. Valid IDs are allocated by the vendor
      class: u8, // The type of function the device performs
      subclass: u8, // The specific function the device performs
      prog_if: u8, // register-level programming interface, if any
      revision_id: u8 // revision identifier. Valid IDs are allocated by the vendor
  }
#+end_src

To create a =Device= struct we can query a =PciLocation=:
#+begin_src rust
  impl PciLocation {
      fn get_device(&self) -> Option<Device> {
        let reg_0 = self.read_register(0);
        if reg_0 == 0xFFFF_FFFF {
            return None // No device
        }

        let vendor_id = (reg_0 & 0xFFFF) as u16;
        let device_id = (reg_0 >> 16) as u16;

        let reg_2 = self.read_register(2);

        let revision_id = (reg_2 & 0xFF) as u8;
        let prog_if = ((reg_2 >> 8) & 0xFF) as u8;
        let subclass = ((reg_2 >> 16) & 0xFF) as u8;
        let class = ((reg_2 >> 24) & 0xFF) as u8;
        Some(Device {
            location: self.clone(),
            vendor_id,
            device_id,
            class,
            subclass,
            prog_if,
            revision_id
        })
    }
  }
#+end_src

We need some way to print these structs. =PciLocation= is straightforward:
#+begin_src rust
  use core::fmt;
  impl fmt::Display for PciLocation {
      fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
             write!(f, "PCI {:04X}:{:02X}:{:02X}",
                    self.bus, self.slot, self.function)
      }
  }
#+end_src

To print =Device= structs we can use:
#+begin_src rust
  impl fmt::Display for Device {
      fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
          write!(f, "{} [{:04X}:{:04X}] {}:{}",
                 self.location, self.vendor_id, self.device_id,
                 self.class, self.subclass)
      }
  }
#+end_src
but it would be nice to have a human-readable description of the
device class. There is a [[https://wiki.osdev.org/PCI#Class_Codes][table of class codes on OSDev wiki]], but we don't
need the whole table for QEMU. A subset which will do for now is in this
=class_str()= method:
#+begin_src rust
impl Device {
    fn class_str(&self) -> &'static str {
        match self.class {
            0x0 => match self.subclass {
                0 => "Non-VGA-Compatible Unclassified Device",
                1 => "VGA-Compatible Unclassified Device",
                _ => "Unknown",
            },
            0x1 => match self.subclass {
                0x0 => "SCSI Bus Controller",
                0x1 => "IDE Controller",
                0x2 => "Floppy Disk Controller",
                0x3 => "IPI Bus Controller",
                0x4 => "RAID Controller",
                0x5 => "ATA Controller",
                0x6 => "Serial ATA Controller",
                0x7 => "Serial Attached SCSI Controller",
                0x8 => "Non-Volatile Memory Controller",
                _ => "Mass Storage Controller"
            }
            0x2 => match self.subclass {
                0x0 => "Ethernet Controller",
                0x1 => "Token Ring Controller",
                0x2 => "FDDI Controller",
                0x3 => "ATM Controller",
                0x4 => "ISDN Controller",
                0x5 => "WorldFip Controller",
                0x6 => "PICMG 2.14 Multi Computing Controller",
                0x7 => "Infiniband Controller",
                0x8 => "Fabric Controller",
                _ => "Network Controller"
            }
            0x3 => match self.subclass {
                0x0 => "VGA Compatible Controller",
                0x1 => "XGA Controller",
                0x2 => "3D Controller (Not VGA-Compatible)",
                _ => "Display Controller"
            }
            0x4 => match self.subclass {
                0x0 => "Multimedia Video Controller",
                0x1 => "Multimedia Audio Controller",
                0x2 => "Computer Telephony Device",
                0x3 => "Audio Device",
                _ => "Multimedia Controller"
            }
            0x5 => match self.subclass {
                0x0 => "RAM Controller",
                0x1 => "Flash Controller",
                _ => "Memory Controller"
            }
            0x6 => match self.subclass {
                0x0 => "Host Bridge",
                0x1 => "ISA Bridge",
                0x2 => "EISA Bridge",
                0x3 => "MCA Bridge",
                0x4 => "PCI-to-PCI Bridge",
                0x5 => "PCMCIA Bridge",
                0x6 => "NuBus Bridge",
                0x7 => "CardBus Bridge",
                0x8 => "RACEway Bridge",
                0x9 => "PCI-to-PCI Bridge",
                0xA => "InfiniBand-to-PCI Host Bridge",
                _ => "Bridge"
            }
            _ => "Unknown"
        }
    }
}
#+end_src

That allows =Device= to be formatted as:
#+begin_src rust
  impl fmt::Display for Device {
      fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
          write!(f, "{} [{:04X}:{:04X}] {}",
                 self.location, self.vendor_id, self.device_id, self.class_str())
      }
  }
#+end_src

Finally we can run a brute force check of all PCI locations, printing
the devices:
#+begin_src rust
  #[no_mangle]
  fn main() {
      // Brute force check of all PCI slots
      for bus in 0..256 {
          for slot in 0..32 {
              if let Some(device) = (
                  PciLocation{bus,
                              slot,
                              function:0}).get_device() {
                  debug_println!("Device {}", device);
              }
          }
      }
  }
#+end_src

#+CAPTION: List of PCI locations, vendor:device IDs, and device class on QEMU
#+NAME: fig-class
[[./img/12-02-class.png]]

