* A text editor for EuraliOS

EuraliOS really needs a simple text editor, to be able to start
doing useful things like changing the configuration from within
the operating system itself.

Ultimately it would probably be best to support a library like
[[https://github.com/crossterm-rs/crossterm][Crossterm]] or [[https://github.com/redox-os/termion][Termion]]  (used in Redox OS), that many programs
can use to provide a terminal interface. For now we'll write a
simple editor, as an excuse to learn something about text editor
data structures.

The first thing our text editor needs is a way to read command line
arguments. Well, maybe not the first thing, but it's what seemed
achievable.

** Command line arguments

Command-line arguments in Rust are collected by calling
=std::env::args()= (see the [[https://doc.rust-lang.org/book/ch12-01-accepting-command-line-arguments.html][Rust book]]). In EuraliOS the interface
will be:

#+begin_src rust
  use euralios_std::env;
  ...
  let args: Vec<String> = env::args().collect();
#+end_src

To make this work the command-line arguments must be passed
from the parent to the new process. One way would be to send a
message from the parent to the child process, containing the
arguments. This would add more syscalls to the process startup,
and create possible deadlocks for the parent process if the
child didn't start correctly. Instead we can use the parameter
string that is already passed to the =exec= syscall.

In [[25-multiple-users.org][Multiple Users]] the parameter string was used to specify the Virtual
File System (VFS) of the child process. This uses a simple format with
single character commands (e.g. 'C' copies the parent VFS, '-' removes
a mount path). We now add another command 'A' that specifies a
null-terminated string.

The library interface to =exec= is =euralios_std::syscalls::exec=.  We
add an =args: Vec<&str>= input, push an 'A' character to the parameter
string followed by these strings separated by =0x03=, the =ETX=
End-of-text ASCII control character, and terminating with a =0= byte.

In the kernel =sys_exec= function the argument string is copied into a
=Vec<u8>= on the kernel heap so that it's accessible when the page
table is changed. It's then passed as a new input to
=new_user_thread= in =process.rs=.

The argument string is passed to the new process on the stack:
Stacks grow downwards, to the string is put on the stack above
the length of string. Then register =rdx= is set to the address
of the string length. In the =_start= function (that calls the
user =main()=) we get =args_address= from =rdx= and then store
the =u8= slice in a =static mut= variable:

#+begin_src rust
  ARGS_SLICE = unsafe{
      let length = *(args_address as *mut i32) as usize;
      slice::from_raw_parts((args_address + 4) as *const u8, length)
  };
#+end_src

Once a program starts, this slice is only read by calling an
internal function =get_args -> &'static [u8]=.
The user accesses this through the =env::args()= function:

#+begin_src rust
  pub fn args() -> impl Iterator<Item = String> {
    // Convert bytes into a vector of owned strings
    get_args()
        .split(|&b| b == 0x03)
        .map(|arg| String::from_utf8_lossy(arg).into_owned())
  }
#+end_src

This splits the string on =0x03= chars, as used in the
=euralios_std::syscalls::exec= function. We can now start
an editor and get the command-line arguments:

#+begin_src rust
  use euralios_std::{println, env};

  #[no_mangle]
  fn main() {
      for arg in env::args() {
          println!("Arg: {}", arg);
      }
  }
#+end_src

** Text editor piece table

Now we can tell the editor which file to open, we need to choose how
to represent the data in memory. Here we're going to implement a [[https://en.wikipedia.org/wiki/Piece_table][Piece
table]], one of several data structures used in text editors (others
include [[https://en.wikipedia.org/wiki/Gap_buffer][Gap buffers]] and [[https://en.wikipedia.org/wiki/Rope_(data_structure)][Ropes]]. For small files a simple =Vec= is
probably sufficient).

Piece tables have three components: The original text, that is read
and never modified, an "Add buffer" that is added to (never removed)
as the user types, and the piece table itself. The piece table
describes the order of pieces of text in the document. Each piece can
come from either the Original buffer or the Add buffer, and has a
starting position in that buffer and a length.  When a file is first
opened there is only one piece, the whole of the Original buffer. As
text is added or deleted, more pieces are created. When the text is
displayed on screen or saved to file, the pieces are assembled in the
order in the piece table.

We can define a Piece as:
#+begin_src rust
  #[derive(Clone, Copy)]
  enum Piece {
      // Start, len [bytes]
      Original{start: usize, len: usize},
      Add{start: usize, len: usize},
  }
#+end_src

** Moving around in the buffer

The piece table provides a nice way to insert and delete text anywhere,
but makes moving around, say one line up or down, a little fiddly.
To keep track of a location in the file we can define a =Cursor=:

#+begin_src rust
  #[derive(Clone, Copy)]
struct Cursor {
    piece: usize, // Index of the piece the cursor is in
    pos: usize, // Position inside the piece
}
#+end_src

Some operations that are needed in many places are moving to the next
and previous character:

#+begin_src rust
  impl File {
      fn next(&self, cursor: Cursor) -> Option<Cursor> {
          if cursor.piece == self.pieces.len() {
              return None; // End of the file
          }
          if cursor.pos == self.pieces[cursor.piece].len() - 1 {
              return Some(Cursor{piece: cursor.piece + 1,
                                 pos: 0});
          }
          Some(Cursor{piece: cursor.piece,
                      pos: cursor.pos + 1})
      }

      fn previous(&self, cursor: Cursor) -> Option<Cursor> {
          if cursor.pos == 0 {
              if cursor.piece == 0 {
                  return None; // Start of the file
              }
              return Some(Cursor {piece: cursor.piece - 1,
                                  pos: self.pieces[cursor.piece - 1].len() - 1});
          }
          Some(Cursor{piece: cursor.piece,
                      pos: cursor.pos - 1})
      }
  }
#+end_src
Note that the cursor can be on the character after the end of the file
(=pieces= equal to =file.pieces.len()=), because it's the location
where the next character will go. This needs to be handled
in the function that returns the character at the cursor location:

#+begin_src rust
  impl File {
      fn at(&self, cursor: Cursor) -> u8 {
          if cursor.piece == self.pieces.len() {
              return 0;
          }
          match self.pieces[cursor.piece] {
              Piece::Original{start: start, ..} =>
                  self.original[start + cursor.pos],
              Piece::Add{start: start, ..} =>
                  self.add[start + cursor.pos]
          }
      }
  }
#+end_src


** Adding a status bar

It would be nice to have a status bar, to show the name of the file
being edited, and indicate when a file has changed. I like the [[https://en.wikipedia.org/wiki/GNU_nano][nano]]
interface with its list of shortcut keys at the bottom.

Putting a bar at the bottom of the screen is harder than it seems:
We would need to know how many rows the screen has. We're using VGA
mode so we could hard-wire this, but for now we'll just put the
bar at the top of the screen instead.

** More efficient output

The `display` function is fast enough, but quite inefficient: It makes
multiple calls to =print=, where one would be enough.  Each call to
=print= allocates a new memory chunk, copies text into it, and sends
the chunk in a message to the VGA driver to be processed.

Instead we can eliminate most of this copying, and only send one
message, by writing everything into one buffer and sending that.
Allocate some memory:
#+begin_src rust
  let buffer_limit = 8000; // Maximum number of bytes
  let (mut mem_handle, _) = syscalls::malloc(buffer_limit as u64, 0).unwrap();
#+end_src

Now we need to wrap this memory handle in an object that implements
the =core::fmt::Write= interface.
#+begin_src rust
struct Buffer<'a>(&'a mut [u8], usize);
#+end_src

#+begin_src rust
impl Write for Buffer<'_> {
    fn write_str(&mut self, s: &str) -> fmt::Result {
        let space_left = self.0.len() - self.1;
        if space_left > s.len() {
            self.0[self.1..][..s.len()].copy_from_slice(s.as_bytes());
            self.1 += s.len();
            Ok(())
        } else {
            Err(fmt::Error)
        }
    }
}
#+end_src
We can now replace all =print!(...)= calls with =write!(buffer,...)=.
Then at the end of the =display= function we send the whole buffer
to =stdout=:
#+begin_src rust
  _ = message::rcall(&syscalls::STDOUT,
                     message::WRITE,
                     (buffer.1 as u64).into(),
                     mem_handle.into(),
                     None);
#+end_src

The (very) basic text editor is now working!

#+CAPTION: Editing a small text file
#+NAME: fig-edit
[[./img/27-01-basic-editor.png]]

** Editing longer files

Basic text editing is now working, but we can't move around by
going up and down lines or edit files longer than a single
screen.

We now need to keep track of the first character on the screen,
and its line number.
