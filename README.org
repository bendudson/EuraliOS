* EuraliOS

A hobby x86-64 operating system written in [[http://rust-lang.org][Rust]]. Named for Euralia in
A.A. Milne's [[https://en.wikipedia.org/wiki/Once_on_a_Time][Once on a Time]] because I don't know who this is intended
for except, to borrow Milne's introduction, "For those, young or old,
who like the things which I like...  Either you will enjoy it, or you
won't. It is that sort of +book+ project."

*Disclaimer*: This was written by someone who doesn't (or didn't) know
anything about Rust or operating systems. The result is probably not
idiomatic Rust or a sensible OS design. If you are looking for a
usable operating system implemented in Rust then [[https://www.redox-os.org/][Redox OS]] is probably
what you want.

This started with [[https://os.phil-opp.com/][Philipp Oppermann's amazing blog]] on OS development
with Rust (second edition), and makes use of many of the crates that
Phil maintains (e.g. [[https://docs.rs/x86_64/latest/x86_64/][x86_64]] and [[https://docs.rs/bootloader/latest/bootloader/][bootloader]]). That blog has inspired
many other operating system siblings that I've found useful to study
including [[https://github.com/WartaPoirier-corp/ananos][ananos]], the [[https://github.com/sos-os/kernel][Stupid Operating System]], [[https://github.com/intermezzOS][intermezzOS]], and
especially [[https://github.com/vinc/moros][MOROS the Obscure Rust Operating System]]. The [[https://github.com/redox-os/kernel][Redox OS
kernel]] is also very readable, and [[https://github.com/betrusted-io/xous-core][Xous]] has a similar focus on message
passing. Anything useful here was probably borrowed from one of these
projects; mistakes and omissions are my own.

** Features

There are many different directions to explore in building an OS, and
with EuraliOS I've focussed mainly on memory management and
pre-emptive multitasking so far. The result is an OS that can't do
much, but it can do it all at the same time.

- [X] Basic VGA text output (phil-opp blog)
- [X] Keyboard input (phil-opp blog)
- [X] UART Serial port output (phil-opp blog)
- [X] ELF loader (adapted from MOROS approach, using the [[https://crates.io/crates/object][object crate]])
- [X] Pre-emptive multitasking, with kernel and user-space threads and
  a round-robin scheduler
- [X] Programs in user space (Ring 3), with syscalls to access kernel
  functions.
- [X] Program isolation using paging
- [X] Frame allocator based on a bitmap tree structure
- [X] On-demand memory allocation using page fault handler
- [X] User space stack and heap memory management
- [X] RTL8139 network card driver running in user space
- [X] TCP network stack using [[https://docs.rs/smoltcp/latest/smoltcp/][smoltcp]] in user space, with DHCP and DNS
- [X] A simple [[https://en.wikipedia.org/wiki/Gopher_(protocol)][Gopher]] browser
- [X] A vDSO-like fast mechanism for timing functions

There is no filesystem (yet), so user programs are compiled and then
the ELF files are included in the kernel binary using Rust's
[[https://doc.rust-lang.org/std/macro.include_bytes.html][include_bytes]] macro (another idea taken from [[https://github.com/vinc/moros][MOROS]]).

** Building and running

After setting up Rust, Cargo and QEMU (see phil-opp blog), just
running:
#+begin_src bash
  $ make run
#+end_src
should download dependencies, build everything, and launch qemu.

** Documentation

I've tried to document the steps to build EuraliOS, starting from the
end of [[https://os.phil-opp.com/heap-allocation/][post 10 (heap allocation)]] of Phil Opp's blog (2nd Ed). At that
point the kernel had a heap and a bump frame allocator (so could
allocate but not free memory), some code to handle pages,
exceptions, and VGA output. [[https://os.phil-opp.com/async-await/][Post 11]] went on to add Async/Await
cooperative multitasking, but here we go in a slightly different
direction...

- [[file:doc/journal/01-interrupts-processes.org][1. Interrupts and processes]] in which kernel multi-threading is
  introduced by modifying the timer interrupt handler to capture and
  change the context (registers etc).
- [[file:doc/journal/02-userspace.org][2. Userspace]] in which a program is loaded into memory and run in
  Ring 3 (user space). Syscall/sysret is used to implement a simple
  way to print from user programs.
- [[file:doc/journal/03-memory.org][3. Memory management]] in which we create separate page tables for
  user processes and stacks for each thread.
- [[file:doc/journal/04-more-syscalls.org][4. Syscalls for thread control]] which adds syscalls to spawn new
  threads and to exit from a thread. We also learn how to use the
  [[https://www.felixcloutier.com/x86/swapgs][swapgs]] and [[https://www.felixcloutier.com/x86/wrmsr][wrmsr]] instructions to switch stacks inside syscalls.
- [[file:doc/journal/05-memory-returns.org][5. Memory returns]] which implements a better frame allocator that
  can keep track of available frames, so that memory can be freed when
  threads and processes exit.
- [[file:doc/journal/06-user-memory.org][6. User space memory management]] in which we create a heap for each
  user process so that user programs can use =Box=, =Vec= etc, using a
  linked list allocator. As a bonus this allows a threading API with
  closures as in the Rust stdlib. We also re-organise the repository
  into a Cargo Workspace, with separate crates for the kernel and user
  program.
- [[file:doc/journal/07-ipc.org][7. Inter-process communication (IPC)]] where a simple "rendezvous"
  communication method is implemented, enabling a user program to
  get input from the keyboard.
- [[file:doc/journal/08-faster-ipc.org][8. Faster IPC]] in which we switch tasks in syscalls and keyboard
  interrupt handler, to minimise delays in the communication.
- [[file:doc/journal/09-message-sending.org][9. Sending messages]] which adds the =send= syscall, allowing the user
  program to send messages to a VGA output kernel thread.
- [[file:doc/journal/10-stdlib.org][10. A standard library]] in which we start a =euralios_std= "standard"
  library, moving code out of the user program into a separate crate.
- [[file:doc/journal/11-messages.org][11. More messages]]
- [[file:doc/journal/12-devices.org][12. PCI devices]] where we start working on input/output to PCI
  devices and discovering which devices are available.
- [[file:doc/journal/13-return-to-sender.org][13. Return to sender]] where we add the =send_receive= syscall to make
  remote procedure calls more reliable, and start to develop a Virtual
  File System (VFS) with a new =open= syscall.
- [[file:doc/journal/14-network.org][14. RTL8139 network card]] where we develop a basic driver for the
  [[https://wiki.osdev.org/RTL8139][RTL8139]] card, adapting [[https://github.com/vinc/moros/blob/trunk/src/sys/net/rtl8139.rs][the MOROS driver]]. In the process we wrap the
  =send_receive= system call into an =rcall= remote procedure call,
  and add frame allocation of consecutive physical frames for direct
  memory access.
- [[file:doc/journal/15-messages.org][15. Message error handling]] where we add error handling and send retries to
  make messaging more robust. We also add a =thread_yield= system call
  to yield control of the processor when waiting and recovering from errors.
- [[file:doc/journal/16-arp.org][16. Address Resolution Protocol]] implementation: Writing a simple program
  to send and receive an ARP packet through the network.
- [[file:doc/journal/17-tcp-stack.org][17. TCP stack]] where the [[https://docs.rs/smoltcp/latest/smoltcp/][smoltcp]] crate is used to provide a TCP stack
  in user-space which communicates with the network card driver by
  messaging.
- [[file:doc/journal/18-gopher.org][18. Gopher]]: Developing a simple Gopher protocol browser, and in the
  process improving the Virtual File System (VFS) to handle more
  complicated OPEN messages, and the TCP program to READ and WRITE
  sockets.
- [[./doc/journal/19-timing.org][19. Timing]]: Adding functions to get time since system start. To
  speed up access to timer calibration data we map a page read-only
  into every user program, as the [[https://man7.org/linux/man-pages/man7/vdso.7.html][Linux virtual dynamic shared object
  (vDSO)]] does.
- [[./doc/journal/20-dns.org][20. Domain Name System (DNS)]], adding the ability to look up IP addresses
  from host names.
- [[./doc/journal/21-vga.org][21. VGA driver]] in user space

** Notes

- [[./doc/journal/xx-shell.org][A shell]]
- [[./doc/journal/xx-usb.org][USB]] (xHCI)
- [[./doc/journal/xx-wifi.org][WiFi]]

** Bibliography

Useful reference material includes:

- [[https://wiki.osdev.org/Expanded_Main_Page][The OSDev.org wiki]]
- [[https://www.amd.com/system/files/TechDocs/24593.pdf][AMD64 Architecture Programmer's Manual (Vol 2: System programming)]]
- [[https://0xax.gitbooks.io/linux-insides/content/][Linux insides]] by [[https://twitter.com/0xAX][@0xAX]]
- [[https://www.kernel.org/doc/html/latest/][The Linux Kernel documentation]]

Other relevant links

- [[https://osblog.stephenmarz.com/index.html][The Adventures of OS: Making a RISC-V Operating System using Rust]]
- [[https://github.com/nuta/resea][The resea micro-kernel based OS]] written in C
- [[https://github.com/nuta/kerla/][The kerla monolithic kernel]] written in Rust
- [[https://github.com/thepowersgang/rust_os][The "Tifflin" kernel]] written in Rust
- [[https://github.com/IsaacWoods/poplar][Poplar]] operating system in Rust

